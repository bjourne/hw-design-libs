{
    "input" : {
        "input" : [],
        "output" : ["o"],
        "constraints" : []
    },
    "output" : {
        "input" : ["i"],
        "output" : ["o"],
        "constraints" : ["i == o"],
        "optional_outputs": true
    },
    "const" : {
        "input" : [],
        "output" : ["o"],
        "constraints" : []
    },
    // Temporarily here
    "case" : {
        "input" : [
            "c",
            "i1", "i2", "i3", "i4",
            "i5", "i6", "i7", "i8"
        ],
        "output" : ["o"],
        "constraints" : [
            "c == 2",
            "i1 == i2",
            "i2 == i3",
            "i3 == i4",
            "i4 == o"
        ]
    },
    "pctrl" : {
        "input" : ["clk", "rstn", "cnt", "in_valid"],
        "output" : ["start", "in_ready", "out_valid"],
        "is_module" : true,
        "constraints" : [
            "in_ready == 1",
            "out_valid == 1",
            "cnt == 8"
        ]
    },
    "full_adder" : {
        "input" : ["a", "b", "ci"],
        "output" : ["s", "co"],
        "is_module" : true,
        "constraints" : [
            "a == 1",
            "b == 1",
            "s == 1",
            "co == 1"
        ]
    },
    "timer" : {
        "input" : ["clk", "set", "cnt"],
        "output" : ["timeout"],
        "is_module" : true,
        "constraints" : [
            "clk == 1",
            "set == 1",
            "cnt == 8",
            "timeout == 1"
        ]
    },
    // Structural
    "cat" : {
        "input" : ["i1", "i2"],
        "output" : ["o"],
        "constraints" : [
            "i1 + i2 == o"
        ]
    },
    "slice" : {
        "input" : ["bits", "hi", "lo"],
        "output" : ["o"],
        "constraints" : [
            "hi.value >= lo.value",
            "hi.value - lo.value + 1 == o"
        ]
    },
    "cast" : {
        "input" : ["n", "i"],
        "output" : ["o"],
        "is_module" : false,
        "constraints" : [
            "n.value == o",
            "i >= n.value"
        ]
    },
    // Logic
    "not" : {
        "input" : ["i"],
        "output" : ["o"],
        "constraints" : [
            "i == o"
        ]
    },

    // Comparisons
    "eq" : {
        "input": ["i1", "i2"],
        "output": ["o"],
        "constraints" : [
            "o == 1",
            "i1 == i2"
        ]
    },
    "le" : {
        "input": ["i1", "i2"],
        "output": ["o"],
        "constraints" : [
            "o == 1",
            "i1 == i2"
        ]
    },
    "gt" : {
        "input": ["i1", "i2"],
        "output": ["o"],
        "constraints" : [
            "o == 1",
            "i1 == i2"
        ]
    },
    "ge" : {
        "input": ["i1", "i2"],
        "output": ["o"],
        "constraints" : [
            "o == 1",
            "i1 == i2"
        ]
    },
    "shl" : {
        "input": ["bits", "i"],
        "output": ["o"],
        "constraints" : [
            "bits == o"
        ]
    },
    "and" : {
        "input": ["i1", "i2"],
        "output": ["o"],
        "constraints" : [
            "i1 == i2",
            "i2 == o"
        ]
    },
    "xor" : {
        "input": ["i1", "i2"],
        "output": ["o"],
        "constraints" : [
            "i1 == i2",
            "i2 == o"
        ]
    },

    "or" : {
        "input": ["i1", "i2"],
        "output": ["o"],
        "constraints" : [
            "i1 == i2",
            "i2 == o"
        ]
    },
    // Reducing logic
    "reduce_xor" : {
        "input" : ["i"],
        "output" : ["o"],
        "constraints" : [
            "o == 1"
        ]
    },
    "reduce_and" : {
        "input" : ["i"],
        "output" : ["o"],
        "constraints" : [
            "o == 1"
        ]
    },
    "reduce_or" : {
        "input" : ["i"],
        "output" : ["o"],
        "constraints" : [
            "o == 1"
        ]
    },
    "sub" : {
        "input": ["i1", "i2"],
        "output": ["o"],
        "constraints" : [
            "i1 == i2",
            "i2 == o"
        ]
    },
    "add" : {
        "input": ["i1", "i2"],
        "output": ["o"],
        "constraints" : [
            "i1 == i2",
            "i2 == o"
        ]
    },
    "mul" : {
        "input": ["i1", "i2"],
        "output": ["o"],
        "constraints" : [
            "i1 == i2",
            "o == 2*i2"
        ]
    },
    "if" : {
        "input" : ["c", "i1", "i2"],
        "output" : ["o"],
        "constraints" : [
            "i1 == i2",
            "i2 == o",
            "c == 1"

        ]
    },
    "reg" : {
        "input" : ["clk", "i"],
        "output" : ["o"],
        "constraints" : [
            "clk == 1",
            "i == o"
        ]
    }
}
